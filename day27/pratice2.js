console.log(1);
// 函数执行是同步的，只不过函数里面创建了一个异步任务
setTimeout(() => {
    console.log(2);
}, 0);
console.log(3);
// 当打开一个页面时，浏览器会分配一个线程来执行页面代码，而且把全部的同步代码执行完成以后才会执行异步代码
// 主任务队列（同步代码）
// 异步任务队列（异步任务）
// 不管是同步任务还是异步任务，都只能在主线程输出
// 当主线程执行的时候，如果遇到异步就放到异步任务队列（Event Queue）中（让浏览器再分配一个线程来执行，但是这时候异步任务不输出）当主任务执行完成之后，主线程空闲了，会去异步任务队列中拿满足输出条件的任务到主任务队列中来执行（不断循环这个过程，就叫做事件循环Event Loop）
// 定时器 事件 ajax promise async await